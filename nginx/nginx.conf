user nginx;
worker_processes auto;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # ログ設定
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # 基本設定
    sendfile on;
    keepalive_timeout 65;

    # セキュリティヘッダー
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' https: http: data: blob: 'unsafe-inline'" always;

    upstream frontend {
        server frontend:3000;
    }

    upstream backend {
        server backend:8000;
    }

    # HTTP用(80番ポート)
    server {
        listen 80;
        server_name sironeko-tech.com;

        # 機密ファイルへのアクセスを拒否
        location ~ /\. {
            deny all;
            return 404;
            access_log off;
            log_not_found off;
        }

        # ACMEチャレンジ用（これは.well-knownへのアクセスを許可する必要がある）
        location ^~ /.well-known/acme-challenge/ {
            default_type "text/plain";
            root /var/www/certbot;
            allow all;
        }

        # HTTPSへリダイレクト
        location / {
            return 301 https://$host$request_uri;
        }
    }

    # HTTPS用(443番ポート)
    server {
        listen 443 ssl;
        http2 on;
        server_name sironeko-tech.com;

        ssl_certificate /etc/letsencrypt/live/sironeko-tech.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/sironeko-tech.com/privkey.pem;

        # SSLの設定
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers off;
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:50m;
        ssl_session_tickets off;

        # DHパラメータ
        ssl_dhparam /etc/nginx/dhparam.pem;  # これは後で生成します

        # 機密ファイルへのアクセスを拒否
        location ~ /\. {
            deny all;
            return 404;
            access_log off;
            log_not_found off;
        }

        # フロントエンド
        location / {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # WebSocket対応
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            # タイムアウト設定
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # バックエンドAPI
        location /api/ {
            # 機密ファイルへのアクセスを拒否
            location ~ /api/\. {
                deny all;
                return 404;
                access_log off;
                log_not_found off;
            }

            rewrite ^/api/?(.*)$ /$1 break;
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_redirect off;
            
            # CORS headers
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;

            # タイムアウト設定
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # OpenAPI (Swagger) JSON
        location /api/openapi.json {
            proxy_pass http://backend/openapi.json;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Swagger UI
        location /api/docs {
            proxy_pass http://backend/docs;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
} 