version: '3.8'

services:
  nginx:
    image: nginx:latest
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/logs:/var/log/letsencrypt
    depends_on:
      - frontend
      - backend
      - certbot-auto-renew

  # 手動で証明書を取得するための Certbot サービス
  certbot:
    image: certbot/certbot
    container_name: ponpoko-certbot
    volumes:
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/logs:/var/log/letsencrypt

  # 自動更新用の Certbot サービス
  certbot-auto-renew:
    image: certbot/certbot
    container_name: ponpoko-certbot-auto-renew
    volumes:
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/logs:/var/log/letsencrypt
    entrypoint: /bin/sh
    command: >
      -c "trap exit TERM;
          while :; do
            certbot renew --webroot -w /var/www/certbot --post-hook 'nginx -s reload';
            sleep 12h;
          done;"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    expose:
      - "3000"
    ports:
      - "9229:9229"
    volumes:
      - type: volume
        source: node_modules
        target: /app/node_modules
      - type: volume
        source: next_cache
        target: /app/.next
      - type: bind
        source: ./frontend
        target: /app
        consistency: cached
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost/api
      - NODE_ENV=development
      - WATCHPACK_POLLING=true
    command: >
      sh -c "
        if [ ! -f package.json ]; then
          echo 'Error: package.json not found'
          exit 1
        fi &&
        npm install &&
        npm run dev -- -p 3000 --hostname 0.0.0.0
      "
    user: "node"
    depends_on:
      - backend

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    expose:
      - "8000"
    env_file:
      - ./backend/.env
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --root-path /api --reload
    volumes:
      - ./backend:/app
    depends_on:
      - db

  db:
    build:
      context: ./db
      dockerfile: Dockerfile
    expose:
      - "3306"
    env_file:
      - ./db/.env
    command: >
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --default-authentication-plugin=mysql_native_password
      --bind-address=0.0.0.0
      --skip-ssl
    volumes:
      - mysql_data:/var/lib/mysql
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "3306:3306"

volumes:
  mysql_data:
    external: true
  node_modules:
  next_cache:
